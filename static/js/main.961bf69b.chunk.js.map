{"version":3,"sources":["static/images/aeropress.svg","components/Header/Header.tsx","components/Footer/Footer.tsx","components/Recipe/GeneratorButtons.tsx","components/Recipe/RECIPE_CONFIG.ts","components/Recipe/Steps/HeatWater.tsx","lib/toFahrenheit.ts","components/Recipe/Steps/GrindCoffee.tsx","components/Recipe/Steps/PourCoffee.tsx","components/Recipe/Steps/Invert.tsx","components/Recipe/Steps/Bloom.tsx","components/Recipe/Steps/AddWater.tsx","components/Recipe/Steps/Stir.tsx","lib/formatTimeEnglish.ts","components/Recipe/Steps/Brew.tsx","components/Recipe/Steps/EndInvert.tsx","components/Recipe/Timer/Timer.tsx","components/Recipe/Timer/RecipeTimer.tsx","components/Recipe/ShareRecipe/ShareRecipe.tsx","components/Recipe/Steps/StepList.tsx","components/Recipe/Recipe.tsx","components/App/App.tsx","registerServiceWorker.js","index.tsx"],"names":["Header","className","src","aeropress","alt","Footer","href","target","rel","GeneratorButtons","params","setRenderRecipe","setSeed","useState","get","seedInput","setSeedInput","error","setError","nanoid","customAlphabet","alphanumeric","onClick","newSeed","set","newRelativePathQuery","window","location","pathname","toString","history","pushState","setTimeout","type","placeholder","name","id","value","onChange","e","htmlFor","COFFEE_WATER_RATIOS","coffee","water","GRIND_BREWTIME_RATIOS","grind","time","BLOOM_WATER_G","BLOOM_SECONDS","BREW_TEMP_C","CLOCKWISE_STIR_TIMES","HeatWater","celsius","coffeeWaterRng","brewTempRng","coffeeWaterId","length","brewTempId","GrindCoffee","grindBrewTimeRng","grindBrewTimeId","PourCoffee","Invert","invertRng","Bloom","bloomWaterGRng","bloomSecondsRng","bloomWaterGId","bloomSecondsId","AddWater","Stir","times","clockwiseStirTimesRng","anticlockwiseStirRng","clockwiseStirTimesId","instruction","Brew","EndInvert","Timer","label","elapsedTime","setElapsedTime","timerActive","setTimerActive","countRef","useRef","undefined","tempTime","displayTime","toLocaleString","minimumFractionDigits","clearInterval","current","setInterval","RecipeTimer","bloomWaterId","bloomTimeId","brewTimeId","quote","ShareRecipe","shareLink","console","log","EmailShareButton","url","subject","EmailIcon","round","FacebookShareButton","FacebookIcon","RedditShareButton","title","RedditIcon","TwitterShareButton","hashtags","TwitterIcon","StepList","numIntArr","Recipe","URLSearchParams","search","renderRecipe","seed","seedrandom","rngFloat","setRngFloat","useEffect","split","slice","map","numStr","parseInt","val","CSSTransition","in","classNames","timeout","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8NAAe,G,YAAA,IAA0B,uCCW1BA,EATA,WACb,OACE,yBAAQC,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAWF,UAAU,WAAWG,IAAI,mBAC9C,oBAAIH,UAAU,YAAd,yCC4BSI,EAlCA,WACb,OACE,wBAAQJ,UAAU,aAAlB,SACE,qDACyB,IACvB,mBACEK,KAAK,iCACLC,OAAO,SACPC,IAAI,sBAHN,yBAOA,uBATF,cAUc,IACZ,mBACEF,KAAK,+CACLC,OAAO,SACPC,IAAI,sBAHN,kDAMK,IAjBP,2BAkB2B,IACzB,mBACEF,KAAK,0CACLC,OAAO,SACPC,IAAI,sBAHN,0B,yDC0EOC,EAtFU,SAAC,GAIG,IAH3BC,EAG0B,EAH1BA,OACAC,EAE0B,EAF1BA,gBACAC,EAC0B,EAD1BA,QAC0B,EACQC,mBAASH,EAAOI,IAAI,SAAW,IADvC,mBACnBC,EADmB,KACRC,EADQ,OAEAH,mBAAS,IAFT,mBAEnBI,EAFmB,KAEZC,EAFY,KAIpBC,EAASC,YAAeC,IAAc,GAsC5C,OACE,gCACE,mDACA,6BACE,wBACEpB,UAAU,kBACVqB,QA1C2B,WACjCX,GAAgB,GAChB,IAAMY,EAAUJ,IAEhBP,EAAQW,GACRP,EAAaO,GAEbb,EAAOc,IAAI,OAAQD,GACnB,IAAME,EACJC,OAAOC,SAASC,SAAW,IAAMlB,EAAOmB,WAC1CC,QAAQC,UAAU,KAAM,GAAIN,GAEdO,YAAW,WACvBrB,GAAgB,KACf,IA0BC,sBAOF,sBAAKV,UAAU,oBAAf,UACE,uBACEgC,KAAK,OACLhC,UAAU,cACViC,YAAY,OACZC,KAAK,OACLC,GAAG,OACHC,MAAOtB,EACPuB,SAAU,SAACC,GACTvB,EAAauB,EAAEhC,OAAO8B,UAG1B,uBAAOG,QAAQ,OAAOvC,UAAU,cAAhC,kBAGA,mBAAGA,UAAU,QAAb,SAAsBgB,OAExB,6BACE,wBACEhB,UAAU,kBACVqB,QAlD6B,WACnC,GAAIP,EAAW,CACbG,EAAS,IACTP,GAAgB,GAEhBC,EAAQG,GAERL,EAAOc,IAAI,OAAQT,GACnB,IAAMU,EACJC,OAAOC,SAASC,SAAW,IAAMlB,EAAOmB,WAC1CC,QAAQC,UAAU,KAAM,GAAIN,GAEdO,YAAW,WACvBrB,GAAgB,KACf,QAEHO,EAAS,aAgCP,6BCpFKuB,EAAsB,CACjC,CAAEC,OAAQ,GAAIC,MAAO,KACrB,CAAED,OAAQ,GAAIC,MAAO,KACrB,CAAED,OAAQ,GAAIC,MAAO,KACrB,CAAED,OAAQ,GAAIC,MAAO,MAGVC,EAAwB,CACnC,CAAEC,MAAO,OAAQC,KAAM,IACvB,CAAED,MAAO,SAAUC,KAAM,IACzB,CAAED,MAAO,SAAUC,KAAM,MAGdC,EAAgB,CAAC,EAAG,GAAI,IACxBC,EAAgB,CAAC,GAAI,GAAI,IACzBC,EAAc,CAAC,GAAI,GAAI,GAAI,IAC3BC,EAAuB,CAAC,EAAG,EAAG,GCT3C,IAYeC,EAZG,SAAC,GAAqD,ICR3CC,EDQRC,EAAkD,EAAlDA,eAAgBC,EAAkC,EAAlCA,YAC7BC,EAAgBF,EAAiBZ,EAAoBe,OACrDC,EAAaH,EAAcL,EAAYO,OAC7C,OACE,uCACO,mCAASf,EAAoBc,GAAeZ,MAA5C,OADP,gBAEK,mCAASM,EAAYQ,GAArB,WAFL,KAGE,oCCfuBL,EDeDH,EAAYQ,GCdpB,EAAVL,EAAe,EAAI,IDcvB,WAHF,QESWM,EAdK,SAAC,GAGI,IAFvBL,EAEsB,EAFtBA,eACAM,EACsB,EADtBA,iBAEMJ,EAAgBF,EAAiBZ,EAAoBe,OACrDI,EAAkBD,EAAmBf,EAAsBY,OACjE,OACE,wCACQ,mCAASf,EAAoBc,GAAeb,OAA5C,OADR,mBAEeE,EAAsBgB,GAAiBf,MAFtD,cCVWgB,EAJI,WACjB,OAAO,6DCiBMC,EAdA,SAAC,GAEd,OAF6C,EAA7BC,UACW,EAElB,qFAGL,uHCaSC,EAhBD,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,eAAgBC,EAAuC,EAAvCA,gBACzBC,EAAgBF,EAAiBlB,EAAcS,OAC/CY,EAAiBF,EAAkBlB,EAAcQ,OACvD,OAAIT,EAAcoB,GAEd,sCACM,mCAASpB,EAAcoB,GAAvB,OADN,qBAEE,uCAAUnB,EAAcoB,MAF1B,uCAOK,MCcIC,EA1BE,SAAC,GAAuD,IAArDhB,EAAoD,EAApDA,eAAgBY,EAAoC,EAApCA,eAC5BV,EAAgBF,EAAiBZ,EAAoBe,OACrDW,EAAgBF,EAAiBlB,EAAcS,OACrD,OAAIT,EAAcoB,GAEd,mDACoB,IAClB,mCACG1B,EAAoBc,GAAeZ,MAClCI,EAAcoB,GAFlB,OAIU,IANZ,eAYA,qDAEE,mCAAS1B,EAAoBc,GAAeZ,MAA5C,OAFF,SCfN,IAmBe2B,EAnBF,SAAC,GAAgE,ICT5CC,EDSlBC,EAA6D,EAA7DA,sBAAuBC,EAAsC,EAAtCA,qBAC/BC,EACJF,EAAwBtB,EAAqBM,OAE/C,GAAIN,EAAqBwB,GAAwB,EAAG,CAClD,IAAIC,EAAc,GAQlB,OAPAA,GACE,UCfU,KADkBJ,EDiBVrB,EAAqBwB,ICflC,OAEKH,EAAQ,UDclB,sBANwBE,EAAuB,IAQ/CE,GAAe,mCAEV,6BAAKA,IAEZ,OAAO,MERIC,EAVF,SAAC,GAAqC,IAC3ChB,EAD0C,EAAlCD,iBAC6Bf,EAAsBY,OACjE,OACE,uCACO,mCAASZ,EAAsBgB,GAAiBd,KAAhD,OADP,gBCSW+B,EAdG,SAAC,GAEjB,OAFgD,EAA7Bd,UACQ,EAGvB,6JAMK,MCuCIe,EA9CD,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOjC,EAAuB,EAAvBA,KAAuB,EACPjC,mBAAS,GADF,mBACtCmE,EADsC,KACzBC,EADyB,OAEPpE,oBAAS,GAFF,mBAEtCqE,EAFsC,KAEzBC,EAFyB,KAIvCC,EAAWC,sBAA2BC,GAExCC,EAAW,EAqBTC,GADgB1C,EAAOkC,GACKS,oBAAeH,EAAW,CAC1DI,sBAAuB,IAGzB,OACE,qBAAKzF,UAAU,eAAf,SACGiF,EACC,yBAAQjF,UAAU,qBAAqBqB,QAb5B,WACf6D,GAAe,GACfzD,OAAOiE,cAAcP,EAASQ,UAW1B,UACGb,EADH,IACWS,EADX,OAIA,yBAAQvF,UAAU,sBAAsBqB,QA9B5B,WAChB6D,GAAe,GACfC,EAASQ,QAAUlE,OAAOmE,aAAY,WAChCN,EAAWzC,GACbmC,EAAeM,GACfA,GAAY,KAEZJ,GAAe,GACfzD,OAAOiE,cAAcP,EAASQ,YAE/B,MAoBC,UACGb,EADH,IACWS,EADX,UCXOM,EArBK,SAAC,GAII,IAHvB7B,EAGsB,EAHtBA,eACAC,EAEsB,EAFtBA,gBACAP,EACsB,EADtBA,iBAEMoC,EAAe9B,EAAiBlB,EAAcS,OAC9CwC,EAAc9B,EAAkBlB,EAAcQ,OAC9CyC,EAAatC,EAAmBf,EAAsBY,OAC5D,OACE,sBAAKvD,UAAU,kBAAf,UACG8F,EACC,cAAC,EAAD,CAAOhB,MAAO,aAAcjC,KAAME,EAAcgD,KAC9C,KACJ,cAAC,EAAD,CACEjB,MAAO,YACPjC,KAAMF,EAAsBqD,GAAYnD,W,gECnB1CoD,EAAQ,sCAsCCC,EApCK,WAClB,IAAMC,EAAY1E,OAAOC,SAASrB,KAElC,OADA+F,QAAQC,IAAI,aAAcF,GAExB,sBAAKnG,UAAU,kBAAf,UACE,oDACA,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAACsG,EAAA,EAAD,CAAkBC,IAAKJ,EAAWK,QAASP,EAA3C,SACE,cAACQ,EAAA,EAAD,CAAWC,OAAO,QAGtB,qBAAK1G,UAAU,eAAf,SACE,cAAC2G,EAAA,EAAD,CAAqBJ,IAAKJ,EAAWF,MAAOA,EAA5C,SACE,cAACW,EAAA,EAAD,CAAcF,OAAO,QAGzB,qBAAK1G,UAAU,eAAf,SACE,cAAC6G,EAAA,EAAD,CAAmBN,IAAKJ,EAAWW,MAAOb,EAA1C,SACE,cAACc,EAAA,EAAD,CAAYL,OAAO,QAGvB,qBAAK1G,UAAU,eAAf,SACE,cAACgH,EAAA,EAAD,CACET,IAAKJ,EACLW,MAAOb,EACPgB,SAAU,CAAC,YAAa,kBAH1B,SAKE,cAACC,EAAA,EAAD,CAAaR,OAAO,eCUjBS,EA/BE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,UAClB,OACE,qCACE,+BACE,cAAC,EAAD,CAAWhE,eAAgBgE,EAAU,GAAI/D,YAAa+D,EAAU,KAChE,cAAC,EAAD,CACEhE,eAAgBgE,EAAU,GAC1B1D,iBAAkB0D,EAAU,KAE9B,cAAC,EAAD,IACA,cAAC,EAAD,CAAQtD,UAAWsD,EAAU,KAC7B,cAAC,EAAD,CAAOpD,eAAgBoD,EAAU,GAAInD,gBAAiBmD,EAAU,KAChE,cAAC,EAAD,CAAUhE,eAAgBgE,EAAU,GAAIpD,eAAgBoD,EAAU,KAClE,cAAC,EAAD,CACE7C,sBAAuB6C,EAAU,GACjC5C,qBAAsB4C,EAAU,KAElC,cAAC,EAAD,CAAM1D,iBAAkB0D,EAAU,KAClC,cAAC,EAAD,CAAWtD,UAAWsD,EAAU,KAChC,0CAhBM,KAkBR,cAAC,EAAD,CACEpD,eAAgBoD,EAAU,GAC1BnD,gBAAiBmD,EAAU,GAC3B1D,iBAAkB0D,EAAU,KAE9B,cAAC,EAAD,QCCSC,EAtCA,WACb,IAAM5G,EAAS,IAAI6G,gBAAgB7F,OAAOC,SAAS6F,QADhC,EAEqB3G,oBAAS,GAF9B,mBAEZ4G,EAFY,KAEE9G,EAFF,OAGKE,mBAASH,EAAOI,IAAI,SAHzB,mBAGZ4G,EAHY,KAGN9G,EAHM,OAIaC,mBAC9B8G,IAAWjH,EAAOI,IAAI,cAAWwE,EAAjCqC,IALiB,mBAIZC,EAJY,KAIFC,EAJE,KAQnBC,qBAAU,WACR,GAAIJ,EAAM,CACRG,EAAYF,IAAWD,EAAXC,IACE3F,YAAW,WACvBrB,GAAgB,KACf,MAEJ,CAAC+G,IAEJ,IACML,EADeO,EAAS/F,WAAWkG,MAAM,IAAIC,MAAM,GAC1BC,KAAI,SAACC,GAAD,OAAYC,SAASD,MAExD,OACE,sBAAKjI,UAAU,aAAf,UACE,cAAC,EAAD,CACES,OAAQA,EACRC,gBAAiB,SAACyH,GAAD,OAASzH,EAAgByH,IAC1CxH,QAAS,SAACwH,GAAD,OAASxH,EAAQwH,MAE5B,qBAAKnI,UAAU,OAAf,SACE,qBAAKA,UAAU,aAAf,SACE,cAACoI,EAAA,EAAD,CAAeC,GAAIb,EAAcc,WAAW,UAAUC,QAAS,IAA/D,SACE,8BAAMf,GAAgB,cAAC,EAAD,CAAUJ,UAAWA,gBCrBxCoB,EAVH,WACV,OACE,sBAAKxI,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCDAyI,EAAcC,QACW,cAA7BjH,OAAOC,SAASiH,UAEe,UAA7BlH,OAAOC,SAASiH,UAEhBlH,OAAOC,SAASiH,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BrD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBqD,OAAM,SAAA1I,GACLoF,QAAQpF,MAAM,4CAA6CA,MCzEjE2I,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,kBAAwBvI,OAAOC,UAC3CuI,SAAWxI,OAAOC,SAASuI,OAIvC,OAGFxI,OAAOyI,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,kBAAN,sBAEPvB,IAiDV,SAAiCK,GAE/BqB,MAAMrB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQzJ,IAAI,gBAAgB0J,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMtB,MAAK,SAAAC,GACjCA,EAAasB,aAAavB,MAAK,WAC7BzH,OAAOC,SAASgJ,eAKpB7B,EAAgBC,MAGnBY,OAAM,WACLtD,QAAQC,IACN,oEArEAsE,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAMtB,MAAK,WACjC9C,QAAQC,IACN,gHAMJwC,EAAgBC,OCzCxB8B,K","file":"static/js/main.961bf69b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/aeropress.330402c8.svg\";","import aeropress from \"../../static/images/aeropress.svg\";\n\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <img src={aeropress} className=\"App-logo\" alt=\"aeropress-logo\" />\n      <h1 className=\"App-title\">Random Aeropress Recipe</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","const Footer = () => {\n  return (\n    <footer className=\"App-footer\">\n      <p>\n        Built with &hearts; by{\" \"}\n        <a\n          href=\"https://github.com/thewinniewu\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          thewinniewu\n        </a>\n        <br />\n        Inspired by{\" \"}\n        <a\n          href=\"https://aero.press/products/brew-recipe-dice\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          James Hoffmann's Coffee Brewing Dice\n        </a>{\" \"}\n        | Aeropress icon made by{\" \"}\n        <a\n          href=\"https://www.flaticon.com/authors/monkik\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          monkik\n        </a>\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import { useState } from \"react\";\nimport { customAlphabet } from \"nanoid\";\nimport alphanumeric from \"nanoid-dictionary/alphanumeric\";\n\ntype GeneratorButtonProps = {\n  params: URLSearchParams;\n  setRenderRecipe: (arg0: boolean) => void;\n  setSeed: (arg0: string) => void;\n};\n\nconst GeneratorButtons = ({\n  params,\n  setRenderRecipe,\n  setSeed,\n}: GeneratorButtonProps) => {\n  const [seedInput, setSeedInput] = useState(params.get(\"seed\") || \"\");\n  const [error, setError] = useState(\"\");\n\n  const nanoid = customAlphabet(alphanumeric, 8);\n\n  const handleGenerateRandomRecipe = () => {\n    setRenderRecipe(false);\n    const newSeed = nanoid();\n\n    setSeed(newSeed);\n    setSeedInput(newSeed);\n\n    params.set(\"seed\", newSeed);\n    const newRelativePathQuery =\n      window.location.pathname + \"?\" + params.toString();\n    history.pushState(null, \"\", newRelativePathQuery);\n\n    const timer = setTimeout(() => {\n      setRenderRecipe(true);\n    }, 0);\n  };\n\n  const handleGenerateRecipeFromSeed = () => {\n    if (seedInput) {\n      setError(\"\");\n      setRenderRecipe(false);\n\n      setSeed(seedInput);\n\n      params.set(\"seed\", seedInput);\n      const newRelativePathQuery =\n        window.location.pathname + \"?\" + params.toString();\n      history.pushState(null, \"\", newRelativePathQuery);\n\n      const timer = setTimeout(() => {\n        setRenderRecipe(true);\n      }, 0);\n    } else {\n      setError(\"Required\");\n    }\n  };\n  return (\n    <div>\n      <h1>Generate a Recipe</h1>\n      <h1>\n        <button\n          className=\"btn btn-primary\"\n          onClick={handleGenerateRandomRecipe}\n        >\n          Random\n        </button>\n      </h1>\n      <div className=\"form__group field\">\n        <input\n          type=\"text\"\n          className=\"form__field\"\n          placeholder=\"Seed\"\n          name=\"seed\"\n          id=\"seed\"\n          value={seedInput}\n          onChange={(e) => {\n            setSeedInput(e.target.value);\n          }}\n        />\n        <label htmlFor=\"name\" className=\"form__label\">\n          Seed\n        </label>\n        <p className=\"error\">{error}</p>\n      </div>\n      <h1>\n        <button\n          className=\"btn btn-primary\"\n          onClick={handleGenerateRecipeFromSeed}\n        >\n          From Seed\n        </button>\n      </h1>\n    </div>\n  );\n};\n\nexport default GeneratorButtons;\n","// coffee and water ratios in grams\nexport const COFFEE_WATER_RATIOS = [\n  { coffee: 23, water: 200 },\n  { coffee: 18, water: 250 },\n  { coffee: 15, water: 250 },\n  { coffee: 12, water: 200 },\n];\n\nexport const GRIND_BREWTIME_RATIOS = [\n  { grind: \"fine\", time: 60 },\n  { grind: \"medium\", time: 90 },\n  { grind: \"coarse\", time: 120 },\n];\n\nexport const BLOOM_WATER_G = [0, 30, 60];\nexport const BLOOM_SECONDS = [20, 30, 40];\nexport const BREW_TEMP_C = [80, 85, 90, 95];\nexport const CLOCKWISE_STIR_TIMES = [0, 1, 2];\n","import { COFFEE_WATER_RATIOS, BREW_TEMP_C } from \"../RECIPE_CONFIG\";\nimport { toFahrenheit } from \"../../../lib/toFahrenheit\";\n\ntype HeatWaterInput = {\n  coffeeWaterRng: number;\n  brewTempRng: number;\n};\n\nconst HeatWater = ({ coffeeWaterRng, brewTempRng }: HeatWaterInput) => {\n  const coffeeWaterId = coffeeWaterRng % COFFEE_WATER_RATIOS.length;\n  const brewTempId = brewTempRng % BREW_TEMP_C.length;\n  return (\n    <li>\n      Heat <strong>{COFFEE_WATER_RATIOS[coffeeWaterId].water}g</strong> of water\n      to <strong>{BREW_TEMP_C[brewTempId]}°C</strong> /\n      <strong>{toFahrenheit(BREW_TEMP_C[brewTempId])}°F</strong>.\n    </li>\n  );\n};\n\nexport default HeatWater;\n","export function toFahrenheit(celsius: number): number {\n  return (celsius * 9) / 5 + 32;\n}\n","import { COFFEE_WATER_RATIOS, GRIND_BREWTIME_RATIOS } from \"../RECIPE_CONFIG\";\n\ntype GrindCoffeeInput = {\n  coffeeWaterRng: number;\n  grindBrewTimeRng: number;\n};\n\nconst GrindCoffee = ({\n  coffeeWaterRng,\n  grindBrewTimeRng,\n}: GrindCoffeeInput) => {\n  const coffeeWaterId = coffeeWaterRng % COFFEE_WATER_RATIOS.length;\n  const grindBrewTimeId = grindBrewTimeRng % GRIND_BREWTIME_RATIOS.length;\n  return (\n    <li>\n      Grind <strong>{COFFEE_WATER_RATIOS[coffeeWaterId].coffee}g</strong> of\n      coffee to a {GRIND_BREWTIME_RATIOS[grindBrewTimeId].grind} grind.\n    </li>\n  );\n};\n\nexport default GrindCoffee;\n","const PourCoffee = () => {\n  return <li>Pour in the ground coffee.</li>;\n};\n\nexport default PourCoffee;\n","type InvertInput = {\n  invertRng: number;\n};\n\nconst Invert = ({ invertRng }: InvertInput) => {\n  const invert = invertRng % 2;\n  if (invert) {\n    return <li>Place the aeropress in the upside-down orientation.</li>;\n  } else {\n    return (\n      <li>\n        Place the aeropress on the mug in the normal orientation with wet filter\n        and cap on.\n      </li>\n    );\n  }\n};\n\nexport default Invert;\n","import { BLOOM_WATER_G, BLOOM_SECONDS } from \"../RECIPE_CONFIG\";\n\ntype BloomWaterInput = {\n  bloomWaterGRng: number;\n  bloomSecondsRng: number;\n};\n\nconst Bloom = ({ bloomWaterGRng, bloomSecondsRng }: BloomWaterInput) => {\n  const bloomWaterGId = bloomWaterGRng % BLOOM_WATER_G.length;\n  const bloomSecondsId = bloomSecondsRng % BLOOM_SECONDS.length;\n  if (BLOOM_WATER_G[bloomWaterGId]) {\n    return (\n      <li>\n        Add <strong>{BLOOM_WATER_G[bloomWaterGId]}g</strong> of water and wait\n        <strong> {BLOOM_SECONDS[bloomSecondsId]}</strong> seconds for the coffee\n        to bloom.\n      </li>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default Bloom;\n","import { COFFEE_WATER_RATIOS, BLOOM_WATER_G } from \"../RECIPE_CONFIG\";\n\ntype AddWaterInput = {\n  coffeeWaterRng: number;\n  bloomWaterGRng: number;\n};\n\nconst AddWater = ({ coffeeWaterRng, bloomWaterGRng }: AddWaterInput) => {\n  const coffeeWaterId = coffeeWaterRng % COFFEE_WATER_RATIOS.length;\n  const bloomWaterGId = bloomWaterGRng % BLOOM_WATER_G.length;\n  if (BLOOM_WATER_G[bloomWaterGId]) {\n    return (\n      <li>\n        Add the remaining{\" \"}\n        <strong>\n          {COFFEE_WATER_RATIOS[coffeeWaterId].water -\n            BLOOM_WATER_G[bloomWaterGId]}\n          g\n        </strong>{\" \"}\n        of water.\n      </li>\n    );\n  } else {\n    return (\n      <li>\n        Add all the water (\n        <strong>{COFFEE_WATER_RATIOS[coffeeWaterId].water}g</strong>\n        ).\n      </li>\n    );\n  }\n};\n\nexport default AddWater;\n","import { CLOCKWISE_STIR_TIMES } from \"../RECIPE_CONFIG\";\n\nimport { formatTimeEnglish } from \"../../../lib/formatTimeEnglish\";\n\ntype StirInput = {\n  clockwiseStirTimesRng: number;\n  anticlockwiseStirRng: number;\n};\n\nconst Stir = ({ clockwiseStirTimesRng, anticlockwiseStirRng }: StirInput) => {\n  const clockwiseStirTimesId =\n    clockwiseStirTimesRng % CLOCKWISE_STIR_TIMES.length;\n  const anticlockwiseStirId = anticlockwiseStirRng % 2;\n  if (CLOCKWISE_STIR_TIMES[clockwiseStirTimesId] > 0) {\n    let instruction = \"\";\n    instruction +=\n      \"Stir \" +\n      formatTimeEnglish(CLOCKWISE_STIR_TIMES[clockwiseStirTimesId]) +\n      \" in one direction.\";\n    if (anticlockwiseStirId) {\n      instruction += \" Repeat in the other direction.\";\n    }\n    return <li>{instruction}</li>;\n  } else {\n    return null;\n  }\n};\n\nexport default Stir;\n","export function formatTimeEnglish(times: number): string {\n  if (times === 1) {\n    return \"once\";\n  } else {\n    return \"\" + times + \" times\";\n  }\n}\n","import { GRIND_BREWTIME_RATIOS } from \"../RECIPE_CONFIG\";\n\ntype BrewInput = {\n  grindBrewTimeRng: number;\n};\n\nconst Brew = ({ grindBrewTimeRng }: BrewInput) => {\n  const grindBrewTimeId = grindBrewTimeRng % GRIND_BREWTIME_RATIOS.length;\n  return (\n    <li>\n      Wait <strong>{GRIND_BREWTIME_RATIOS[grindBrewTimeId].time}s</strong> to\n      brew.\n    </li>\n  );\n};\n\nexport default Brew;\n","type InvertInput = {\n  invertRng: number;\n};\n\nconst EndInvert = ({ invertRng }: InvertInput) => {\n  const invert = invertRng % 2;\n  if (invert) {\n    return (\n      <li>\n        Wet the filter paper, and put the cap on. Place the mug upside-down on\n        the aeropress and flip to be the normal orientation.\n      </li>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default EndInvert;\n","import { useState, useRef } from \"react\";\n\ntype TimerInput = {\n  label: string;\n  time: number;\n};\n\nconst Timer = ({ label, time }: TimerInput) => {\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [timerActive, setTimerActive] = useState(false);\n\n  const countRef = useRef<number | undefined>(undefined);\n\n  let tempTime = 0.0;\n\n  const startTime = () => {\n    setTimerActive(true);\n    countRef.current = window.setInterval(() => {\n      if (tempTime < time) {\n        setElapsedTime(tempTime);\n        tempTime += 0.1;\n      } else {\n        setTimerActive(false);\n        window.clearInterval(countRef.current);\n      }\n    }, 100);\n  };\n\n  const stopTime = () => {\n    setTimerActive(false);\n    window.clearInterval(countRef.current);\n  };\n\n  const remainingTime = time - elapsedTime;\n  const displayTime = remainingTime.toLocaleString(undefined, {\n    minimumFractionDigits: 1,\n  });\n\n  return (\n    <div className=\"timer-button\">\n      {timerActive ? (\n        <button className=\"btn btn-timer-stop\" onClick={stopTime}>\n          {label} {displayTime}s\n        </button>\n      ) : (\n        <button className=\"btn btn-timer-start\" onClick={startTime}>\n          {label} {displayTime}s\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Timer;\n","import Timer from \"./Timer\";\nimport {\n  GRIND_BREWTIME_RATIOS,\n  BLOOM_SECONDS,\n  BLOOM_WATER_G,\n} from \"../RECIPE_CONFIG\";\n\ntype RecipeTimerInput = {\n  bloomWaterGRng: number;\n  bloomSecondsRng: number;\n  grindBrewTimeRng: number;\n};\n\nconst RecipeTimer = ({\n  bloomWaterGRng,\n  bloomSecondsRng,\n  grindBrewTimeRng,\n}: RecipeTimerInput) => {\n  const bloomWaterId = bloomWaterGRng % BLOOM_WATER_G.length;\n  const bloomTimeId = bloomSecondsRng % BLOOM_SECONDS.length;\n  const brewTimeId = grindBrewTimeRng % GRIND_BREWTIME_RATIOS.length;\n  return (\n    <div className=\"timer-container\">\n      {bloomWaterId ? (\n        <Timer label={\"Bloom Time\"} time={BLOOM_SECONDS[bloomTimeId]} />\n      ) : null}\n      <Timer\n        label={\"Brew Time\"}\n        time={GRIND_BREWTIME_RATIOS[brewTimeId].time}\n      />\n    </div>\n  );\n};\n\nexport default RecipeTimer;\n","import {\n  EmailShareButton,\n  FacebookShareButton,\n  RedditShareButton,\n  TwitterShareButton,\n} from \"react-share\";\n\nimport { EmailIcon, FacebookIcon, RedditIcon, TwitterIcon } from \"react-share\";\n\nconst quote = \"Check out my aeropress-dice recipe!\";\n\nconst ShareRecipe = () => {\n  const shareLink = window.location.href;\n  console.log(\"share link\", shareLink);\n  return (\n    <div className=\"share-container\">\n      <h1>Share your recipe!</h1>\n      <div className=\"share-button-container\">\n        <div className=\"share-button\">\n          <EmailShareButton url={shareLink} subject={quote}>\n            <EmailIcon round={true} />\n          </EmailShareButton>\n        </div>\n        <div className=\"share-button\">\n          <FacebookShareButton url={shareLink} quote={quote}>\n            <FacebookIcon round={true} />\n          </FacebookShareButton>\n        </div>\n        <div className=\"share-button\">\n          <RedditShareButton url={shareLink} title={quote}>\n            <RedditIcon round={true} />\n          </RedditShareButton>\n        </div>\n        <div className=\"share-button\">\n          <TwitterShareButton\n            url={shareLink}\n            title={quote}\n            hashtags={[\"aeropress\", \"aeropress_dice\"]}\n          >\n            <TwitterIcon round={true} />\n          </TwitterShareButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShareRecipe;\n","import HeatWater from \"./HeatWater\";\nimport GrindCoffee from \"./GrindCoffee\";\nimport PourCoffee from \"./PourCoffee\";\nimport Invert from \"./Invert\";\nimport Bloom from \"./Bloom\";\nimport AddWater from \"./AddWater\";\nimport Stir from \"./Stir\";\nimport Brew from \"./Brew\";\nimport EndInvert from \"./EndInvert\";\n\nimport RecipeTimer from \"../Timer/RecipeTimer\";\n\nimport ShareRecipe from \"../ShareRecipe/ShareRecipe\";\n\ntype StepListInput = {\n  numIntArr: number[];\n};\n\nconst StepList = ({ numIntArr }: StepListInput) => {\n  return (\n    <>\n      <ol key=\"k\">\n        <HeatWater coffeeWaterRng={numIntArr[0]} brewTempRng={numIntArr[1]} />\n        <GrindCoffee\n          coffeeWaterRng={numIntArr[0]}\n          grindBrewTimeRng={numIntArr[2]}\n        />\n        <PourCoffee />\n        <Invert invertRng={numIntArr[3]} />\n        <Bloom bloomWaterGRng={numIntArr[4]} bloomSecondsRng={numIntArr[5]} />\n        <AddWater coffeeWaterRng={numIntArr[0]} bloomWaterGRng={numIntArr[4]} />\n        <Stir\n          clockwiseStirTimesRng={numIntArr[6]}\n          anticlockwiseStirRng={numIntArr[7]}\n        />\n        <Brew grindBrewTimeRng={numIntArr[2]} />\n        <EndInvert invertRng={numIntArr[3]} />\n        <li>Press.</li>\n      </ol>\n      <RecipeTimer\n        bloomWaterGRng={numIntArr[4]}\n        bloomSecondsRng={numIntArr[5]}\n        grindBrewTimeRng={numIntArr[2]}\n      />\n      <ShareRecipe />\n    </>\n  );\n};\n\nexport default StepList;\n","import { useState, useEffect } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport seedrandom from \"seedrandom\";\n\nimport GeneratorButtons from \"./GeneratorButtons\";\nimport StepList from \"./Steps/StepList\";\n\nconst Recipe = () => {\n  const params = new URLSearchParams(window.location.search);\n  const [renderRecipe, setRenderRecipe] = useState(false);\n  const [seed, setSeed] = useState(params.get(\"seed\"));\n  const [rngFloat, setRngFloat] = useState(\n    seedrandom(params.get(\"seed\") || undefined)()\n  );\n\n  useEffect(() => {\n    if (seed) {\n      setRngFloat(seedrandom(seed)());\n      const timer = setTimeout(() => {\n        setRenderRecipe(true);\n      }, 0);\n    }\n  }, [seed]);\n\n  const numStringArr = rngFloat.toString().split(\"\").slice(2);\n  const numIntArr = numStringArr.map((numStr) => parseInt(numStr));\n\n  return (\n    <div className=\"App-recipe\">\n      <GeneratorButtons\n        params={params}\n        setRenderRecipe={(val) => setRenderRecipe(val)}\n        setSeed={(val) => setSeed(val)}\n      />\n      <div className=\"card\">\n        <div className=\"card-block\">\n          <CSSTransition in={renderRecipe} classNames=\"example\" timeout={300}>\n            <div>{renderRecipe && <StepList numIntArr={numIntArr} />}</div>\n          </CSSTransition>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import \"../../static/css/App.css\";\n\nimport Header from \"../Header/Header\";\nimport Footer from \"../Footer/Footer\";\nimport Recipe from \"../Recipe/Recipe\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Recipe />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./static/css/index.css\";\nimport App from \"./components/App/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}